/** *     Copyright © Benjamin S. Berman, 2012 *     All Rights Reserved * This file is part of multics. multics is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. multics is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with multics.  If not, see <http://www.gnu.org/licenses/>. * */package  {	import fl.transitions.Tween;	import fl.transitions.easing.*;	import flash.display.*;	import flash.utils.Timer;	import flash.events.TimerEvent;	import Typewriter;	import fl.text.TLFTextField;	import com.google.analytics.AnalyticsTracker;		public class ProgrammingGame {			var cluebase:Array = 			[["A(1).E. ##BLANK## .OR.A(2).E. ##BLANK## .OR.A(3).E. ##BLANK##",			  "A GOOD ##BLANK## MAKES A GOOD NEIGHBOR; TO SELL STOLEN PROPERTY.",			  "fence",			  "A(1).E.FENCE.OR.A(2).E.FENCE .OR.A(3).E.FENCE"],			 ["PRFULL.($'R'1 ##BLANK## :$)",			  "FOLLOW THE ##BLANK##; GUIDELINES; IKEA'S ##BLANK## ARE HARD TO FOLLOW; SERIES OF ORDERS.",			  "instructions",			  "PRFULL.($'R'1INSTRUCTIONS :$)"],			 ["PRFULL.($ WHERE '=NAME1 NAME2'= IS THE FILE TO BE ##BLANK## ,$)",			  "SENT VIA POST (AT LEAST UNTIL THIS PROGRAM IS WRITTEN).",			  "mailed",			  "PRFULL.($ WHERE '=NAME1 NAME2'= IS THE FILE TO BE MAILED ,$)"],			 ["##BLANK##  OF CONDITIONAL",			  "THIS ROAD IS A DEAD ##BLANK##; ##BLANK## OF THE WORLD.",			  "end",			  "END  OF CONDITIONAL"],			 ["##BLANK##  ME(2)",			  "THREE ##BLANK##'AL; A HOLOGRAPH'S ADVANTAGE OVER A PHOTOGRAPH.",			  "dimension",			  "DIMENSION  ME(2)"],			 ["ATTACH.( ##BLANK##(2), ##BLANK##(1))",			  "##BLANK##, MYSELF AND I.",			  "me",			  "ATTACH.(ME(2),ME (1))"],			 ["PRFULL.(RX,A(1)...2,$''S ##BLANK##",			  "I WANT MY ICE CREAM A-LA-##BLANK##.",			  "mode",			  "PRFULL.(RX,A(1)...2,$''S MODE"],			 ["PREVENTS ##BLANK## .'B$)",			  "##BLANK##'ING, WRITING AND 'RITHMATIC; A BIBLIOPHILE'S DELIGHT.",			  "read",			  "PREVENTS READING .'B$)"],			 ["MAIL = $ ##BLANK## $",			  "##BLANK## CARE; A PRESSING ISSUE; REQUIRES IMMEDIATE ATTENTION.",			  "urgent",			  "MAIL = $URGENT$"],			 ["GETTM.(DATE , ##BLANK## )",			  "A BRIEF HISTORY OF ##BLANK##; OH, WOULD YOU LOOK AT THE ##BLANK##!",			  "time",			  "GETTM.(DATE ,TIME )"],			 ["THROUGH BSEND, ##BLANK## C=0,2,C.G.BB",			  "ALL ##BLANK## ONE, ONE ##BLANK## ALL.",			  "for",			  "THROUGH BSEND,FOR  C=0,2,C.G.BB"],			 ["##BLANK##    BFCLOS.(MFD,FILE)",			  "##BLANK##-GIRLFRIEND; ##BLANK## POST FACTO; PESKY SCRABBLE WORD; USUALLY PESKY IN GENERAL.",			  "ex",			  "EX           BFCLOS.(MFD,FILE)"],			 ["BOOLEAN ##BLANK##",			  "I'M PUTTING YOU ON THE SHORT ##BLANK##; A ##BLANK##'LESS GAZE; TO ENUMERATE.",			  "list",			  "BOOLEAN LIST"],			 ["##BLANK##  FUNCTION(X,Y)",			  "##BLANK## MEDICINE; ##BLANK## ORGANS; INSIDE OF.",			  "internal",			  "INTERNAL  FUNCTION(X,Y)"],			 ["3  , ##BLANK##  RETURN",			  "A MISTAKE; DUE TO HUMAN ##BLANK##; ENGINEERS OFTEN MAKE THEM.",			  "error",			  "3  , ERROR  RETURN"],			 ["##BLANK##  LABEL  THRU",			  "A BANK ##BLANK##; A DECLARATION.",			  "statement",			  "STATEMENT  LABEL  THRU"],			 ["##BLANK## COMMENT $TOO MANY ADDRESSEES$",			  "GO BUY SOME ##BLANK##'ER TONER, INTERN; CTRL+P; AS OPPOSED TO CURSIVE.",			  "print",			  "PRINT COMMENT $TOO MANY ADDRESSEES$"],			 ["##BLANK## TO OPNMF.",			  "##BLANK## LEVEL JOB; BARRIER TO ##BLANK##; POINT OF INGRESS.",			  "entry",			  "ENTRY TO OPNMF."],			 ["##BLANK## RETURN",			  "TO WORK CORRECTLY; THE PRINTER IS MAL'##BLANK##'ING; A MATHEMATICAL ##BLANK##.",			  "function",			  "FUNCTION RETURN"],			 ["##BLANK## PROGRAM LISTING ... ... ...",			  "ANGRY; ##BLANK## HATTER.",			  "mad",			  "MAD PROGRAM LISTING ... ... ..."],			 ["##BLANK## .(T1, T2, AD1, AD2, N1, N2, 0, S7)",			  "CHAIN ##BLANK## FENCE; TO CONNECT.",			  "link",			  "LINK.(T1,T2,AD1,AD2,N1,N2,0,S7)"],			 ["NORMAL MODE ##BLANK## INTEGER",			  "IT DEPENDS ON WHAT THE MEANING OF THE WORD '##BLANK##' ##BLANK##.",			  "is",			  "NORMAL MODE IS INTEGER"],			 ["##BLANK## .($W$, T1, T2, 1, 2, S6)",			  "##BLANK## AND SHUT CASE; ##BLANK## FOR BUSINESS; AN ##BLANK## MIND.",			  "open",			  "OPEN .($W$, T1, T2, 1, 2, S6)"],			 ["PRFULL. (RX, A(1)...2, $ MUST BE LESS THAN 1 ##BLANK## LONG.' B$)",			  "A ##BLANK## PLAYER; MADE OF VINYL.",			  "record",			  "PRFULL. (RX, A(1)...2, $ MUST BE LESS THAN 1 RECORD LONG.' B$)"],			 ["OR WHENEVER Z(6).A.10K.NE.0 .OR. Z(6).A.20K. ##BLANK## .0 .AND. Z.A.777777K.NE.ME",			  "NW, SW, SE, ##BLANK##; ACRONYM FOR UPPER RIGHT.",			  "ne",			  "OR WHENEVER Z(6).A.10K.NE.0 .OR. Z(6).A.20K.NE.0 .AND. Z.A.777777K.NE.ME"],			 ["##BLANK## (PROB,PROG(1))",			  "THE ##BLANK## PRINCIPLE OF GRAVITATIONAL AND INERTIAL MASS; EQUALITY.",			  "equivalence",			  "EQUIVALENCE (PROB,PROG(1))"],			 ["##BLANK## TO CKMETA",			  "A BUS ##BLANK## TICKET; AS OPPOSED TO CIS; MOVE FROM ONE PLACE TO ANOTHER.",			  "transfer",			  "##BLANK## TO CKMETA"],			 ["BFREAD.(MFD, Z ##BLANK##, DSKER., -0,DSKER.)",			  "TO ##BLANK## BRIEFS; ##BLANK## MY NAILS; A ##BLANK##'ING CABINET.",			  "file",			  "BFREAD.(MFD, Z FILE, DSKER., -0,DSKER.)"],			 ["VECTOR ##BLANK## T2=$BOX$",			  "FAMILY ##BLANK## CANDIDATE; KEYS AND ##BLANK##; MORALS; A SERIES OF NUMBERS.",			  "values",			  "VECTOR VALUES T2=$BOX$"],			 ["##BLANK## .(T1,T2,S4)",			  "##BLANK## UP SHOP; ##BLANK## TO HOME; ##BLANK## THE DOOR!; TO MAKE INACCESSIBLE; NEXT TO.",			  "close",			  "CLOSE.(T1,T2,S4)"]			 ];									var clues:Array = [];						var c:int;			var score:int;			public var ti:Timer;						var extras:MovieClip;			var root:Object;			var tracker:AnalyticsTracker;						public static var GAME_LENGTH:Number = 8;			public static var START_TIME:Number = 150;			var t:Typewriter;									public function ProgrammingGame(_t:Typewriter,_tipText:TLFTextField,_extras:MovieClip,_root:Object,_tracker:AnalyticsTracker) {				t = _t;				extras = _extras;				root = _root;				tracker = _tracker;								constructGame();			}						public function start():void {				t.ready();				t.readLine(startCommand);			}						public function startCommand(s:String):void {				if (s.toLowerCase() == "start") {					tracker.trackPageview("/program/start");					programmingGame("start");				} else {					tracker.trackEvent("mistakes","programming game start",s,1.0);					t.readLine(startCommand,"'" + s + "' NOT FOUND.");				}			}						protected function constructGame() {				c = 0;				score = 0;								var len:int = cluebase.length;				var newbase:Array = cluebase.concat();				clues = new Array(len);				var sel:int = 0;				var tempClue:Array = [];								sel = int(Math.random() * (len));				tempClue = newbase.splice(sel, 1)[0];				clues[0] = ["\nCODE:\n"+tempClue[0]+"\n\nCLUE:\n"+tempClue[1]+"\n\nYOUR ANSWER FOR THE BLANK:",tempClue[1],tempClue[2],tempClue[3]];				for(var i:int = 1; i<len; i++)				{					sel = int(Math.random() * (len - i));					tempClue = newbase.splice(sel, 1)[0];					clues[i] = ["\nCODE:\n"+tempClue[0]+"\n\nCLUE:\n"+tempClue[1]+"\n\nYOUR ANSWER:",tempClue[1],								tempClue[2],tempClue[3]];				}							ti = new Timer(100);				ti.addEventListener(TimerEvent.TIMER,function (e:TimerEvent):void {								   var tm:Number = ProgrammingGame.START_TIME-ti.currentCount*.1;								   if (tm < 0) {									   timeElapsed();								   } else {									   extras.timeRemainingPill.timeText.text = tm.toFixed(1) + " s";								   }				});			}						public function programmingGame(s:String):void {				t.wait();												ti.start();				t.readLine(nextClue,clues[c][0]);			}						public function nextClue(prevInput:String):void {				tracker.trackPageview("/program/clues/" + c.toString());								if (prevInput.toLowerCase() == clues[c][2]) {					tracker.trackEvent("programming clues","answered question",clues[c][2],1.0);					t.writeLine("CORRECT!");					score++;				} else {					tracker.trackEvent("programming clues","answered question",clues[c][2],0.0);					tracker.trackEvent("programming clues","answered question","mistake for " + clues[c][2] + ": " + prevInput,1.0);					t.writeLine("INCORRECT! THE WORD IS " + String(clues[c][2]).toUpperCase() +".");				}								c++;				if (c < ProgrammingGame.GAME_LENGTH) {					t.readLine(nextClue,clues[c][0]);				} else {					gameFinished();				}			}						public function gameFinished():void {				ti.stop();				tracker.trackPageview("/program/end");				tracker.trackEvent("programming clues","finished game","time",Number(ti.currentCount*.1));				tracker.trackEvent("programming clues","finished game","words correct",score);				t.writeLine("SCORE: " + score.toString() + " WORDS CORRECT.");				t.writeLine("TOTAL TIME: " + Number((ti.currentCount-1)*.1).toFixed(1) + " SECONDS.");				function gotoSend():void {root.gotoAndPlay("send start");}				function gotoMenu():void {root.gotoAndPlay("menu start");}				function gotoTryAgain():void {					tracker.trackEvent("programming clues","tried again","retried programming game score",score);					programmingGame("");}								if (score == ProgrammingGame.GAME_LENGTH) {					t.yesNo(gotoSend,gotoMenu,"YOU PERFORMED PERFECTLY! YOU CANNOT IMPROVE. WOULD YOU LIKE TO SEND AN E-MAIL USING THE PROGRAM YOU JUST WROTE?");				} else {					t.writeLine();					var workmessage:String = "";					if (score > 1) {						workmessage = "GOOD PERFORMANCE! YOU COULD IMPROVE. FORTUNATELY, THERE ARE NO GRADES FIRST SEMESTER AT MIT. WANT TO TRY AGAIN?";					} else if (score == 0) {						workmessage = "NO WORDS CORRECT? NO MATTER. THERE ARE NO GRADES FIRST SEMESTER AT MIT. WANT TO TRY AGAIN?";					}					t.yesNo(gotoTryAgain,							function ():void {								t.yesNo(gotoSend,gotoMenu,"WE WILL FIX YOUR ERRORS AND SUBMIT A CORRECT MAIL PROGRAM. WOULD YOU LIKE TO SEND AN E-MAIL USING THE PROGRAM YOU JUST WROTE?");							},workmessage);				}			}						public function timeElapsed():void {				tracker.trackEvent("programming clues","time elapsed","words correct",score);				t.cancel();				gameFinished();			}		}	}